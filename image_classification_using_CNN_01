Step 1: Load and Prepare Data

import tensorflow as tf
import matplotlib.pyplot as plt

# Load MNIST dataset
mnist = tf.keras.datasets.mnist
(x_train, y_train), (x_test, y_test) = mnist.load_data()

# Normalize pixel values (0-255 â†’ 0-1)
x_train, x_test = x_train / 255.0, x_test / 255.0

# Display sample image
plt.imshow(x_train[0], cmap="gray")
plt.title(f"Label: {y_train[0]}")
plt.show()

Step 2: Build a CNN Model

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense

# Define CNN model
model = Sequential([
    Conv2D(32, (3,3), activation='relu', input_shape=(28,28,1)),
    MaxPooling2D(2,2),
    Flatten(),
    Dense(128, activation='relu'),
    Dense(10, activation='softmax')  # 10 classes (digits 0-9)
])

# Compile the model
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])


Step 3: Train the Model

model.fit(x_train, y_train, epochs=5, validation_data=(x_test, y_test))


Step 4: Test on a New Image

import numpy as np

# Pick a test image
index = 10
test_img = x_test[index].reshape(1, 28, 28, 1)

# Predict class
prediction = np.argmax(model.predict(test_img))
print(f"Predicted label: {prediction}")

# Show image
plt.imshow(x_test[index], cmap="gray")
plt.title(f"Predicted: {prediction} | Actual: {y_test[index]}")
plt.show()
