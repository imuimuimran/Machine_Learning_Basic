import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import make_classification
from sklearn.linear_model import LogisticRegression

# Generate synthetic classification dataset (FIXED)
X, y = make_classification(n_samples=100, n_features=2, n_informative=2, n_redundant=0, 
                           n_clusters_per_class=1, random_state=42)

# Train Logistic Regression model step by step
fig, axes = plt.subplots(1, 3, figsize=(15, 4))

for i, reg in enumerate([0.1, 1, 10]):  # Different training stages with increasing regularization
    model = LogisticRegression(C=reg, solver="lbfgs")
    model.fit(X, y)

    # Plot decision boundary
    x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
    y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
    xx, yy = np.meshgrid(np.linspace(x_min, x_max, 200), np.linspace(y_min, y_max, 200))
    Z = model.predict(np.c_[xx.ravel(), yy.ravel()])
    Z = Z.reshape(xx.shape)

    axes[i].contourf(xx, yy, Z, alpha=0.3, cmap="coolwarm")
    axes[i].scatter(X[:, 0], X[:, 1], c=y, edgecolors='k', cmap="coolwarm")
    axes[i].set_title(f"Iteration {i+1}: Regularization C={reg}")

plt.show()
